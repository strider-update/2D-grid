import heapq

class Node:
    def __init__(self, row, col):
        self.row = row
        self.col = col
        self.g_cost = float('inf')  # cost from start node
        self.h_cost = 0  # heuristic cost to goal node
        self.parent = None  # pointer to parent node

    def __lt__(self, other):
        return (self.g_cost + self.h_cost) < (other.g_cost + other.h_cost)

def heuristic(node, goal):
    return abs(node.row - goal.row) + abs(node.col - goal.col)

def astar(grid, start, goal):
    open_set = [start]
    closed_set = set()

    while open_set:
        current = heapq.heappop(open_set)

        if current == goal:
            path = []
            while current:
                path.append((current.row, current.col))
                current = current.parent
            return path[::-1]

        closed_set.add(current)

        neighbors = []
        for row_offset, col_offset in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            neighbor_row, neighbor_col = current.row + row_offset, current.col + col_offset
            if 0 <= neighbor_row < len(grid) and 0 <= neighbor_col < len(grid[0]) and grid[neighbor_row][neighbor_col] == 0:
                neighbors.append(Node(neighbor_row, neighbor_col))

        for neighbor in neighbors:
            if neighbor in closed_set:
                continue

            tentative_g_cost = current.g_cost + 1
            if tentative_g_cost < neighbor.g_cost:
                neighbor.parent = current
                neighbor.g_cost = tentative_g_cost
                neighbor.h_cost = heuristic(neighbor, goal)

                if neighbor not in open_set:
                    heapq.heappush(open_set, neighbor)

    return None  # No path found

# Example usage
grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]

start_node = Node(0, 0)
goal_node = Node(4, 4)

path = astar(grid, start_node, goal_node)

if path:
    print("Path found:")
    for row, col in path:
        print(f"({row}, {col})")
else:
    print("No path found.")
